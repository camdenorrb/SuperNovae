# File ID, generated by `capnp id`
@0xc1d7ab2934a7a0e5;

using Java = import "/capnp/java.capnp";
$Java.package("dev.twelveoclock.supernovae.proto");
$Java.outerClassname("CapnProto");

# Protocol level

struct Message @0x9c63d8afbc958760 {
    union {
        createDb @0 :CreateDB;
        deleteDB @1 :DeleteDB;
        createTable @2 :CreateTable;
        selectDb @3 :SelectDB;
        selectRows @4 :SelectRows;
        deleteRows @5 :DeleteRows;
        insertRow @6 :InsertRow;
        updateRows @7 :UpdateRows;
        selectResponse @8 :SelectResponse;
        loadRows @9 :LoadRows;
        loadTable @10 :LoadTable;
        unloadRows @11 :UnloadRows;
        unloadTable @12 :UnloadTable;
        deleteTable @13 :DeleteTable;
    }
}

struct CreateDB @0x881da94cf2bcd66a {
    databaseName @0 :Text;
}

struct DeleteDB @0xc9e517034562b447 {
    databaseName @0 :Text;
}

struct CreateTable @0xb5e29811110d0f61 {
    tableName @0 :Text;
    keyColumn @1 :Text;
    shouldCacheAll @2 :Bool;
}

struct SelectDB @0xed4c20264edeecb5 {
    databaseName @0 :Text;
}

struct SelectRows @0xffa903674167c9f3 {
    tableName @0 :Text;
    filters @1 :List(Filter);
    onlyCheckCache @2 :Bool = false;
    loadIntoCache @3 :Bool = false;
    amountOfRows @4 :UInt32 = 0; # 0 represents all
}

# struct SelectFirstRow @0xa56b13c46fa3db22 {
#    tableName @0 :Text;
#    filters @1 :List(Filter);
#    onlyCheckCache @2 :Bool = false;
#    loadIntoCache @3 :Bool = false;
# }

# TODO: Remove this and just do optimizations on Select
# struct SelectByKey @0x8fea92f93b0665a4 {
#     tableName @0 :Text;
#     keyColumnValue @1 :Text;
# }

struct DeleteRows @0xa8bf202a88766929 {
    tableName @0 :Text;
    filters @1 :List(Filter);
    amountOfRows @2 :UInt32 = 0; # 0 represents all
}

# struct SelectNRows @0xcc4fde7e1d6b001b {
#    tableName @0 :Text;
#    filters @1 :List(Filter);
#    amountOfRows @2 :UInt32;
#    onlyCheckCache @3 :Bool = false;
# }

struct InsertRow @0xbf1e316e1ed353d5 {
    tableName @0 :Text;
    row @1 :Text; # Json value
    shouldCache @2 :Bool = false;
}

struct UpdateRows @0xeb442c65499a092b {
    tableName @0 :Text;
    filter @1 :Filter;
    columnName @2 :Text;
    value @3 :Text; # Json value
    amountOfRows @5 :UInt32 = 0; # 0 represents all
    onlyCheckCache @4 :Bool = false;
}

# struct SelectResponsePrepend @0xd060986e353ccb49 {
# Rows will be encoded in Json
# Maybe move to a compressed format in the future
#     amountOfRows @0 :UInt32;
# }

# This will be sent N amount of times
struct SelectResponse @0x97678ad2cfb46cb0 {
    # Rows will be encoded in Json
    # Maybe move to a compressed format in the future
    row @0 :Text;
}

# Loads a table into cache
struct LoadTable @0xad23a3c5ab56508e {
    tableName @0 :Text;
}

struct LoadRows @0x929b0ace4e99148f {
    tableName @0 :Text;
    filter @1 :Filter;
    onlyCheckCache @2 :Bool = false;
}


struct UnloadRows @0xcd5554086acdb7c9 {
    tableName @0 :Text;
    filter @1 :Filter;
    onlyCheckCache @2 :Bool = false;
}

struct UnloadTable @0x99996f3faa723c37 {
    tableName @0 :Text;
}

struct DeleteTable @0x9f81cc03d24bfe84 {
    tableName @0 :Text;
}


# API level

struct Filter @0xeafb36c661f158a1 {
    columnName @0 :Text;
    check @1 :Check;
    compareToValue @2 :Text;
}

enum Check @0xd1e179ce4037146c {
    equal @0;
    lesserThan @1;
    greaterThan @2;
    lesserThanOrEqual @3;
    greaterThanOrEqual @4;
}